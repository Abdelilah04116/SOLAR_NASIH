#!/usr/bin/env python3
"""
üî® SOLAR NASIH - Build Script pour Render
Script qui pr√©pare tout le projet pour le d√©ploiement sur Render
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_prerequisites():
    """V√©rifie les pr√©requis"""
    print("üîç V√©rification des pr√©requis...")
    
    required_dirs = ['SolarNasih_SMA', 'SolarNasih_RAG', 'SolarNasih_Template']
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            print(f"‚ùå Erreur: R√©pertoire {dir_name} non trouv√©")
            return False
    
    print("‚úÖ Tous les composants trouv√©s")
    return True

def install_python_dependencies():
    """Installe les d√©pendances Python"""
    print("üì¶ Installation des d√©pendances Python...")
    
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", 
            "SolarNasih_Deploiement_Complet/requirements_unified.txt"
        ], check=True)
        print("‚úÖ D√©pendances Python install√©es")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation Python: {e}")
        return False

def install_node_dependencies():
    """Installe les d√©pendances Node.js"""
    print("üì¶ Installation des d√©pendances Node.js...")
    
    try:
        # Changer vers le r√©pertoire Template
        os.chdir('SolarNasih_Template')
        
        # Installer les d√©pendances
        subprocess.run(['npm', 'install'], check=True)
        
        # Build du frontend
        print("üî® Build du frontend...")
        subprocess.run(['npm', 'run', 'build'], check=True)
        
        # Revenir au r√©pertoire racine
        os.chdir('..')
        
        print("‚úÖ D√©pendances Node.js install√©es et frontend build√©")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation Node.js: {e}")
        return False

def create_environment_file():
    """Cr√©e un fichier d'environnement exemple"""
    print("üìù Cr√©ation du fichier d'environnement...")
    
    env_content = """# ===== SOLAR NASIH - Variables d'Environnement =====

# API Keys
GEMINI_API_KEY=votre_cl√©_gemini_ici
TAVILY_API_KEY=votre_cl√©_tavily_ici
OPENAI_API_KEY=votre_cl√©_openai_ici
ANTHROPIC_API_KEY=votre_cl√©_anthropic_ici

# Configuration des ports
SMA_PORT=8000
RAG_PORT=8001
FRONTEND_PORT=3000

# Configuration de l'environnement
PYTHON_VERSION=3.11
NODE_VERSION=18
ENVIRONMENT=production

# URLs des services (seront configur√©es automatiquement sur Render)
SMA_API_URL=https://votre-app-sma.onrender.com
RAG_API_URL=https://votre-app-rag.onrender.com
FRONTEND_URL=https://votre-app-frontend.onrender.com

# Base de donn√©es (optionnel)
REDIS_URL=redis://localhost:6379
QDRANT_URL=http://localhost:6333
"""
    
    with open('.env.example', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env.example cr√©√©")

def create_startup_script():
    """Cr√©e un script de d√©marrage pour Render"""
    print("üöÄ Cr√©ation du script de d√©marrage...")
    
    startup_content = """#!/usr/bin/env python3
# Script de d√©marrage pour Render
# Ce script est appel√© automatiquement par Render

import os
import sys
import subprocess

# Ajouter le r√©pertoire de d√©ploiement au path
sys.path.append('SolarNasih_Deploiement_Complet')

# Importer et ex√©cuter le d√©marrage unifi√©
from start_all_unified import main

if __name__ == "__main__":
    main()
"""
    
    with open('startup.py', 'w') as f:
        f.write(startup_content)
    
    print("‚úÖ Script startup.py cr√©√©")

def create_render_config():
    """Cr√©e la configuration Render"""
    print("‚òÅÔ∏è Cr√©ation de la configuration Render...")
    
    render_config = """services:
  # Service unifi√© SolarNasih
  - type: web
    name: solar-nasih-unified
    env: python
    buildCommand: python SolarNasih_Deploiement_Complet/build_for_render.py
    startCommand: python startup.py
    envVars:
      - key: GEMINI_API_KEY
        sync: false
      - key: TAVILY_API_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: ANTHROPIC_API_KEY
        sync: false
      - key: PYTHON_VERSION
        value: 3.11
      - key: NODE_VERSION
        value: 18
      - key: ENVIRONMENT
        value: production
      - key: SMA_PORT
        value: 8000
      - key: RAG_PORT
        value: 8001
      - key: FRONTEND_PORT
        value: 3000

  # Service Redis (optionnel)
  - type: redis
    name: solar-nasih-redis
    plan: free
    maxmemoryPolicy: allkeys-lru

  # Service Qdrant (optionnel)
  - type: web
    name: solar-nasih-qdrant
    env: docker
    dockerfilePath: ./SolarNasih_Deploiement_Complet/Dockerfile.qdrant
    envVars:
      - key: QDRANT__SERVICE__HTTP_PORT
        value: 6333
      - key: QDRANT__SERVICE__GRPC_PORT
        value: 6334
"""
    
    with open('render-unified-config.yaml', 'w') as f:
        f.write(render_config)
    
    print("‚úÖ Configuration render-unified-config.yaml cr√©√©e")

def main():
    """Fonction principale"""
    print("============================================================")
    print("üî® SOLAR NASIH - Build Script pour Render")
    print("============================================================")
    
    # V√©rifier les pr√©requis
    if not check_prerequisites():
        sys.exit(1)
    
    # Installer les d√©pendances Python
    if not install_python_dependencies():
        sys.exit(1)
    
    # Installer les d√©pendances Node.js
    if not install_node_dependencies():
        sys.exit(1)
    
    # Cr√©er les fichiers de configuration
    create_environment_file()
    create_startup_script()
    create_render_config()
    
    print("")
    print("============================================================")
    print("üéâ BUILD TERMIN√â AVEC SUCC√àS !")
    print("============================================================")
    print("")
    print("üìÅ Fichiers cr√©√©s:")
    print("   ‚Ä¢ .env.example - Variables d'environnement")
    print("   ‚Ä¢ startup.py - Script de d√©marrage")
    print("   ‚Ä¢ render-unified-config.yaml - Configuration Render")
    print("")
    print("üöÄ Pour d√©ployer sur Render:")
    print("   1. Copiez le contenu de render-unified-config.yaml")
    print("   2. Cr√©ez un nouveau Blueprint sur Render")
    print("   3. Configurez vos variables d'environnement")
    print("   4. Cliquez sur 'Apply'")
    print("")
    print("‚úÖ Build pr√™t pour le d√©ploiement !")
    print("============================================================")

if __name__ == "__main__":
    main()
