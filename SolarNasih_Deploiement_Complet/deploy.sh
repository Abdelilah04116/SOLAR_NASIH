#!/bin/bash

# ========================================
# SOLAR NASIH - Script de D√©ploiement Complet
# ========================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banni√®re
print_banner() {
    echo "============================================================"
    echo "üöÄ SOLAR NASIH - D√©ploiement Complet"
    echo "============================================================"
    echo "Ce script d√©ploie tous les composants :"
    echo "‚Ä¢ SMA (Solar Management Assistant)"
    echo "‚Ä¢ RAG (Retrieval-Augmented Generation)"
    echo "‚Ä¢ Frontend (React/TypeScript)"
    echo "============================================================"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_message "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier les r√©pertoires
    if [ ! -d "SolarNasih_SMA" ]; then
        print_error "R√©pertoire SolarNasih_SMA non trouv√©"
        exit 1
    fi
    
    if [ ! -d "SolarNasih_RAG" ]; then
        print_error "R√©pertoire SolarNasih_RAG non trouv√©"
        exit 1
    fi
    
    if [ ! -d "SolarNasih_Template" ]; then
        print_error "R√©pertoire SolarNasih_Template non trouv√©"
        exit 1
    fi
    
    print_success "Tous les pr√©requis sont satisfaits"
}

# Configuration de l'environnement
setup_environment() {
    print_message "Configuration de l'environnement..."
    
    # Cr√©er le fichier .env s'il n'existe pas
    if [ ! -f ".env" ]; then
        if [ -f "SolarNasih_Deploiement_Complet/env.example" ]; then
            cp SolarNasih_Deploiement_Complet/env.example .env
            print_success "Fichier .env cr√©√© √† partir du template"
            print_warning "N'oubliez pas de configurer vos cl√©s API dans .env"
        else
            print_error "Fichier env.example non trouv√©"
            exit 1
        fi
    else
        print_message "Fichier .env existe d√©j√†"
    fi
}

# D√©ploiement Docker
deploy_docker() {
    print_message "D√©ploiement avec Docker Compose..."
    
    cd SolarNasih_Deploiement_Complet
    
    # Arr√™ter les services existants
    print_message "Arr√™t des services existants..."
    docker-compose down 2>/dev/null || true
    
    # Construire et d√©marrer les services
    print_message "Construction et d√©marrage des services..."
    docker-compose up -d --build
    
    # Attendre que les services d√©marrent
    print_message "Attente du d√©marrage des services..."
    sleep 30
    
    # V√©rifier l'√©tat des services
    print_message "V√©rification de l'√©tat des services..."
    docker-compose ps
    
    cd ..
    
    print_success "D√©ploiement Docker termin√©"
}

# D√©ploiement Render
deploy_render() {
    print_message "Pr√©paration du d√©ploiement Render..."
    
    # V√©rifier que le script Python existe
    if [ -f "SolarNasih_Deploiement_Complet/deploy_render_complete.py" ]; then
        print_message "Ex√©cution du script de d√©ploiement Render..."
        python3 SolarNasih_Deploiement_Complet/deploy_render_complete.py
    else
        print_error "Script de d√©ploiement Render non trouv√©"
        exit 1
    fi
}

# V√©rification des services
check_services() {
    print_message "V√©rification des services..."
    
    # V√©rifier SMA
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        print_success "SMA API est accessible"
    else
        print_warning "SMA API n'est pas accessible"
    fi
    
    # V√©rifier RAG
    if curl -s http://localhost:8001/health > /dev/null 2>&1; then
        print_success "RAG API est accessible"
    else
        print_warning "RAG API n'est pas accessible"
    fi
    
    # V√©rifier Frontend
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        print_success "Frontend est accessible"
    else
        print_warning "Frontend n'est pas accessible"
    fi
}

# Affichage des URLs
show_urls() {
    echo ""
    echo "============================================================"
    echo "üåê URLs des services"
    echo "============================================================"
    echo "Frontend : http://localhost:3000"
    echo "SMA API  : http://localhost:8000"
    echo "RAG API  : http://localhost:8001"
    echo "Qdrant   : http://localhost:6333"
    echo "Redis    : redis://localhost:6379"
    echo ""
    echo "Documentation :"
    echo "SMA Docs : http://localhost:8000/docs"
    echo "RAG Docs : http://localhost:8001/docs"
    echo "============================================================"
}

# Menu principal
show_menu() {
    echo ""
    echo "============================================================"
    echo "üéØ CHOIX DE D√âPLOIEMENT"
    echo "============================================================"
    echo "1. D√©ploiement Docker local"
    echo "2. D√©ploiement Render (Cloud)"
    echo "3. V√©rification des services"
    echo "4. Arr√™t des services"
    echo "5. Logs des services"
    echo "6. Quitter"
    echo "============================================================"
}

# Gestion des logs
show_logs() {
    cd SolarNasih_Deploiement_Complet
    
    echo ""
    echo "============================================================"
    echo "üìã LOGS DES SERVICES"
    echo "============================================================"
    echo "1. Logs SMA"
    echo "2. Logs RAG"
    echo "3. Logs Frontend"
    echo "4. Logs Qdrant"
    echo "5. Logs Redis"
    echo "6. Tous les logs"
    echo "============================================================"
    
    read -p "Choisissez une option (1-6) : " log_choice
    
    case $log_choice in
        1) docker-compose logs -f solar-nasih-sma ;;
        2) docker-compose logs -f solar-nasih-rag ;;
        3) docker-compose logs -f solar-nasih-frontend ;;
        4) docker-compose logs -f solar-nasih-qdrant ;;
        5) docker-compose logs -f solar-nasih-redis ;;
        6) docker-compose logs -f ;;
        *) print_error "Option invalide" ;;
    esac
    
    cd ..
}

# Fonction principale
main() {
    print_banner
    check_prerequisites
    setup_environment
    
    while true; do
        show_menu
        read -p "Choisissez une option (1-6) : " choice
        
        case $choice in
            1)
                deploy_docker
                show_urls
                ;;
            2)
                deploy_render
                ;;
            3)
                check_services
                show_urls
                ;;
            4)
                print_message "Arr√™t des services..."
                cd SolarNasih_Deploiement_Complet
                docker-compose down
                cd ..
                print_success "Services arr√™t√©s"
                ;;
            5)
                show_logs
                ;;
            6)
                print_success "Au revoir !"
                exit 0
                ;;
            *)
                print_error "Option invalide"
                ;;
        esac
        
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Ex√©cution du script
main "$@"
