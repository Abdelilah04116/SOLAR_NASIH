# üöÄ SOLAR NASIH - D√©marrage Unifi√© (PowerShell)
# Script pour d√©marrer tous les services avec une seule commande

Write-Host "============================================================" -ForegroundColor Cyan
Write-Host "üöÄ SOLAR NASIH - D√©marrage de Tous les Services" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Cyan

# V√©rification des pr√©requis
Write-Host "üîç V√©rification des pr√©requis..." -ForegroundColor Yellow

if (-not (Test-Path "SolarNasih_SMA") -or -not (Test-Path "SolarNasih_RAG") -or -not (Test-Path "SolarNasih_Template")) {
    Write-Host "‚ùå Erreur: Composants manquants" -ForegroundColor Red
    Write-Host "   Assurez-vous d'√™tre dans le r√©pertoire racine du projet" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Tous les composants trouv√©s" -ForegroundColor Green

# Installation des d√©pendances Python
Write-Host "üì¶ Installation des d√©pendances unifi√©es..." -ForegroundColor Yellow
try {
    python -m pip install -r SolarNasih_Deploiement_Complet/requirements_unified.txt
    Write-Host "‚úÖ D√©pendances Python install√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de l'installation des d√©pendances Python" -ForegroundColor Red
    exit 1
}

# Installation des d√©pendances Node.js
Write-Host "üì¶ Installation des d√©pendances Node.js..." -ForegroundColor Yellow
try {
    Set-Location SolarNasih_Template
    if (-not (Test-Path "node_modules")) {
        npm install
    }
    Set-Location ..
    Write-Host "‚úÖ D√©pendances Node.js install√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de l'installation des d√©pendances Node.js" -ForegroundColor Red
    exit 1
}

# D√©marrage des services
Write-Host "üöÄ D√©marrage de tous les services..." -ForegroundColor Yellow

# D√©marrer Redis avec Docker (si disponible)
try {
    docker run --name solar-nasih-redis -p 6379:6379 -d redis:alpine
    Write-Host "‚úÖ Redis d√©marr√© avec Docker" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Redis non disponible (Docker requis)" -ForegroundColor Yellow
}

# D√©marrer Qdrant avec Docker (si disponible)
try {
    docker run --name solar-nasih-qdrant -p 6333:6333 -p 6334:6334 -d qdrant/qdrant:latest
    Write-Host "‚úÖ Qdrant d√©marr√© avec Docker" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Qdrant non disponible (Docker requis)" -ForegroundColor Yellow
}

# D√©marrer SMA
Write-Host "üöÄ D√©marrage du service SMA..." -ForegroundColor Yellow
$smaJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD\SolarNasih_SMA
    python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
}

# D√©marrer RAG
Write-Host "ü§ñ D√©marrage du service RAG..." -ForegroundColor Yellow
$ragJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD\SolarNasih_RAG
    python -m uvicorn api_simple:app --host 0.0.0.0 --port 8001 --reload
}

# D√©marrer Frontend
Write-Host "üåê D√©marrage du service Frontend..." -ForegroundColor Yellow
$frontendJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD\SolarNasih_Template
    npm run dev
}

# Attendre un peu pour que les services d√©marrent
Start-Sleep -Seconds 5

Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host "üéâ TOUS LES SERVICES SONT D√âMARR√âS !" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä Services disponibles:" -ForegroundColor White
Write-Host "   ‚Ä¢ SMA API: http://localhost:8000" -ForegroundColor Gray
Write-Host "   ‚Ä¢ RAG API: http://localhost:8001" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Frontend: http://localhost:5173" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Redis: localhost:6379" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Qdrant: localhost:6333" -ForegroundColor Gray
Write-Host ""
Write-Host "üìö Documentation:" -ForegroundColor White
Write-Host "   ‚Ä¢ SMA API Docs: http://localhost:8000/docs" -ForegroundColor Gray
Write-Host "   ‚Ä¢ RAG API Docs: http://localhost:8001/docs" -ForegroundColor Gray
Write-Host ""
Write-Host "üõë Appuyez sur Ctrl+C pour arr√™ter tous les services" -ForegroundColor Yellow
Write-Host "============================================================" -ForegroundColor Cyan

# Fonction pour arr√™ter tous les services
function Stop-AllServices {
    Write-Host "üõë Arr√™t de tous les services..." -ForegroundColor Yellow
    
    # Arr√™ter les jobs PowerShell
    Stop-Job $smaJob -ErrorAction SilentlyContinue
    Stop-Job $ragJob -ErrorAction SilentlyContinue
    Stop-Job $frontendJob -ErrorAction SilentlyContinue
    
    Remove-Job $smaJob -ErrorAction SilentlyContinue
    Remove-Job $ragJob -ErrorAction SilentlyContinue
    Remove-Job $frontendJob -ErrorAction SilentlyContinue
    
    # Arr√™ter les conteneurs Docker
    try {
        docker stop solar-nasih-redis
        docker rm solar-nasih-redis
        docker stop solar-nasih-qdrant
        docker rm solar-nasih-qdrant
    } catch {
        # Ignorer les erreurs si Docker n'est pas disponible
    }
    
    Write-Host "‚úÖ Tous les services arr√™t√©s" -ForegroundColor Green
    exit 0
}

# Configurer le gestionnaire d'interruption
$null = Register-EngineEvent PowerShell.Exiting -Action { Stop-AllServices }

try {
    # Maintenir le script en vie
    while ($true) {
        Start-Sleep -Seconds 1
    }
} catch {
    Stop-AllServices
}
