"""
Agent de D√©tection Multilingue - Solar Nasih SMA
D√©tecte et traite plusieurs langues pour l'assistance solaire
"""

from typing import Dict, Any, List, Optional
import re
import logging
import google.generativeai as genai
from datetime import datetime
from agents.base_agent import BaseAgent, AgentType, Tool

logger = logging.getLogger(__name__)

class MultilingualDetectorAgent(BaseAgent):
    """
    Agent de d√©tection multilingue - d√©tecte la langue des messages utilisateurs
    """
    def __init__(self):
        super().__init__(
            agent_type=AgentType.MULTILINGUAL_DETECTOR,
            description="D√©tecte la langue des messages utilisateurs"
        )

    def _init_tools(self) -> List[Tool]:
        # √Ä compl√©ter avec les outils sp√©cifiques si besoin
        return []

    def _get_system_prompt(self) -> str:
        return """
        Tu es l'agent de d√©tection multilingue du syst√®me Solar Nasih.
        Ta t√¢che est d'identifier la langue du message utilisateur et de fournir cette information aux autres agents.
        """

class MultilingualDetectorAgent:
    """
    Agent de D√©tection Multilingue - D√©tecte et traite plusieurs langues
    """
    
    def __init__(self, gemini_api_key: str = None):
        self.agent_type = "multilingual_detector"
        self.description = "Agent de d√©tection et traitement multilingue pour l'√©nergie solaire"
        
        # Configuration Gemini pour traduction
        if gemini_api_key:
            genai.configure(api_key=gemini_api_key)
            self.gemini_model = genai.GenerativeModel('gemini-pro')
        else:
            self.gemini_model = None
        
        # Langues support√©es avec leurs codes et noms
        self.supported_languages = {
            "fr": {
                "name": "Fran√ßais",
                "native_name": "Fran√ßais",
                "indicators": ["le", "la", "les", "un", "une", "des", "et", "ou", "mais", "pour", "avec", "dans", "sur", "par", "sans", "sous"],
                "solar_terms": ["photovolta√Øque", "solaire", "panneau", "onduleur", "√©lectricit√©", "√©nergie", "installation"]
            },
            "en": {
                "name": "English",
                "native_name": "English", 
                "indicators": ["the", "and", "is", "are", "was", "were", "with", "for", "but", "or", "in", "on", "at", "by"],
                "solar_terms": ["photovoltaic", "solar", "panel", "inverter", "electricity", "energy", "installation"]
            },
            "es": {
                "name": "Espa√±ol",
                "native_name": "Espa√±ol",
                "indicators": ["el", "la", "los", "las", "un", "una", "y", "o", "pero", "para", "con", "en", "por", "sin"],
                "solar_terms": ["fotovoltaico", "solar", "panel", "inversor", "electricidad", "energ√≠a", "instalaci√≥n"]
            },
            "de": {
                "name": "Deutsch",
                "native_name": "Deutsch",
                "indicators": ["der", "die", "das", "und", "ist", "sind", "mit", "f√ºr", "aber", "oder", "in", "auf", "von"],
                "solar_terms": ["photovoltaik", "solar", "panel", "wechselrichter", "strom", "energie", "installation"]
            },
            "it": {
                "name": "Italiano", 
                "native_name": "Italiano",
                "indicators": ["il", "la", "i", "le", "un", "una", "e", "o", "ma", "per", "con", "in", "su", "da"],
                "solar_terms": ["fotovoltaico", "solare", "pannello", "inverter", "elettricit√†", "energia", "installazione"]
            }
        }
        
        # R√©ponses types par langue pour l'√©nergie solaire
        self.solar_responses = {
            "fr": {
                "welcome": "üåû Bonjour ! Je suis votre assistant en √©nergie solaire. Comment puis-je vous aider ?",
                "general_info": """
L'√©nergie solaire photovolta√Øque convertit la lumi√®re du soleil en √©lectricit√©.

‚úÖ Avantages principaux :
‚Ä¢ √ânergie renouvelable et gratuite
‚Ä¢ R√©duction de la facture √©lectrique
‚Ä¢ Impact environnemental positif
‚Ä¢ Autonomie √©nerg√©tique

üí° Sujets que je peux traiter :
‚Ä¢ Prix et financement
‚Ä¢ Simulation de production
‚Ä¢ Conseils techniques
‚Ä¢ R√©glementation
‚Ä¢ D√©marches administratives
                """,
                "pricing": "En France, une installation photovolta√Øque co√ªte entre 2000‚Ç¨ et 3000‚Ç¨ par kWc install√©.",
                "simulation": "La production solaire en France varie de 1000 √† 1400 kWh par kWc install√© selon la r√©gion."
            },
            "en": {
                "welcome": "üåû Hello! I'm your solar energy assistant. How can I help you?",
                "general_info": """
Solar photovoltaic energy converts sunlight into electricity.

‚úÖ Main advantages:
‚Ä¢ Renewable and free energy
‚Ä¢ Electricity bill reduction
‚Ä¢ Positive environmental impact
‚Ä¢ Energy independence

üí° Topics I can help with:
‚Ä¢ Pricing and financing
‚Ä¢ Production simulation
‚Ä¢ Technical advice
‚Ä¢ Regulations
‚Ä¢ Administrative procedures
                """,
                "pricing": "In France, a photovoltaic installation costs between ‚Ç¨2000 and ‚Ç¨3000 per kWp installed.",
                "simulation": "Solar production in France varies from 1000 to 1400 kWh per kWp installed depending on the region."
            },
            "es": {
                "welcome": "üåû ¬°Hola! Soy tu asistente de energ√≠a solar. ¬øC√≥mo puedo ayudarte?",
                "general_info": """
La energ√≠a solar fotovoltaica convierte la luz solar en electricidad.

‚úÖ Principales ventajas:
‚Ä¢ Energ√≠a renovable y gratuita
‚Ä¢ Reducci√≥n de la factura el√©ctrica
‚Ä¢ Impacto ambiental positivo
‚Ä¢ Independencia energ√©tica

üí° Temas que puedo tratar:
‚Ä¢ Precios y financiaci√≥n
‚Ä¢ Simulaci√≥n de producci√≥n
‚Ä¢ Consejos t√©cnicos
‚Ä¢ Regulaciones
‚Ä¢ Tr√°mites administrativos
                """,
                "pricing": "En Francia, una instalaci√≥n fotovoltaica cuesta entre 2000‚Ç¨ y 3000‚Ç¨ por kWp instalado.",
                "simulation": "La producci√≥n solar en Francia var√≠a de 1000 a 1400 kWh por kWp instalado seg√∫n la regi√≥n."
            },
            "de": {
                "welcome": "üåû Hallo! Ich bin Ihr Solarenergie-Assistent. Wie kann ich Ihnen helfen?",
                "general_info": """
Solare Photovoltaik wandelt Sonnenlicht in Elektrizit√§t um.

‚úÖ Hauptvorteile:
‚Ä¢ Erneuerbare und kostenlose Energie
‚Ä¢ Reduzierung der Stromrechnung
‚Ä¢ Positive Umweltauswirkungen
‚Ä¢ Energieunabh√§ngigkeit

üí° Themen, bei denen ich helfen kann:
‚Ä¢ Preise und Finanzierung
‚Ä¢ Produktionssimulation
‚Ä¢ Technische Beratung
‚Ä¢ Vorschriften
‚Ä¢ Verwaltungsverfahren
                """,
                "pricing": "In Frankreich kostet eine Photovoltaikanlage zwischen 2000‚Ç¨ und 3000‚Ç¨ pro installiertem kWp.",
                "simulation": "Die Solarproduktion in Frankreich variiert je nach Region zwischen 1000 und 1400 kWh pro installiertem kWp."
            },
            "it": {
                "welcome": "üåû Ciao! Sono il tuo assistente per l'energia solare. Come posso aiutarti?",
                "general_info": """
L'energia solare fotovoltaica converte la luce solare in elettricit√†.

‚úÖ Principali vantaggi:
‚Ä¢ Energia rinnovabile e gratuita
‚Ä¢ Riduzione della bolletta elettrica
‚Ä¢ Impatto ambientale positivo
‚Ä¢ Indipendenza energetica

üí° Argomenti che posso trattare:
‚Ä¢ Prezzi e finanziamenti
‚Ä¢ Simulazione di produzione
‚Ä¢ Consigli tecnici
‚Ä¢ Regolamentazioni
‚Ä¢ Procedure amministrative
                """,
                "pricing": "In Francia, un impianto fotovoltaico costa tra 2000‚Ç¨ e 3000‚Ç¨ per kWp installato.",
                "simulation": "La produzione solare in Francia varia da 1000 a 1400 kWh per kWp installato a seconda della regione."
            }
        }
        
        # Statistiques d'utilisation
        self.stats = {
            "detections": 0,
            "translations": 0,
            "languages_detected": {},
            "last_detection": None
        }
    
    def detect_language(self, text: str) -> Dict[str, Any]:
        """
        D√©tecte la langue d'un texte avec score de confiance
        
        Args:
            text: Texte √† analyser
            
        Returns:
            Dictionnaire avec langue d√©tect√©e et score de confiance
        """
        
        if not text or len(text.strip()) < 3:
            return {"language": "fr", "confidence": 0.3, "method": "default"}
        
        text_lower = text.lower().strip()
        
        # Suppression de la ponctuation pour l'analyse
        text_clean = re.sub(r'[^\w\s]', ' ', text_lower)
        words = text_clean.split()
        
        if len(words) == 0:
            return {"language": "fr", "confidence": 0.3, "method": "default"}
        
        # Calcul des scores pour chaque langue
        language_scores = {}
        
        for lang_code, lang_data in self.supported_languages.items():
            score = 0
            total_indicators = len(lang_data["indicators"])
            
            # Points pour les indicateurs de langue (mots courants)
            indicator_matches = sum(1 for word in words if word in lang_data["indicators"])
            indicator_score = (indicator_matches / len(words)) * 0.7
            
            # Points pour les termes sp√©cialis√©s en solaire
            solar_matches = sum(1 for word in words if any(term in word for term in lang_data["solar_terms"]))
            solar_score = (solar_matches / len(words)) * 0.3
            
            # Score total
            language_scores[lang_code] = indicator_score + solar_score
        
        # Langue avec le meilleur score
        detected_lang = max(language_scores.items(), key=lambda x: x[1])
        language = detected_lang[0]
        confidence = min(detected_lang[1] * 2, 1.0)  # Normalisation
        
        # Si confiance trop faible, analyse avec patterns sp√©cifiques
        if confidence < 0.4:
            language, confidence = self._detect_with_patterns(text_lower)
        
        # Mise √† jour des statistiques
        self.stats["detections"] += 1
        self.stats["languages_detected"][language] = self.stats["languages_detected"].get(language, 0) + 1
        self.stats["last_detection"] = datetime.now().isoformat()
        
        return {
            "language": language,
            "confidence": confidence,
            "method": "statistical_analysis",
            "alternatives": dict(sorted(language_scores.items(), key=lambda x: x[1], reverse=True)[:3])
        }
    
    def _detect_with_patterns(self, text: str) -> tuple:
        """
        D√©tection avec patterns sp√©cifiques quand l'analyse statistique √©choue
        
        Args:
            text: Texte √† analyser
            
        Returns:
            Tuple (langue, confiance)
        """
        
        # Patterns sp√©cifiques par langue
        patterns = {
            "en": [
                r"\b(what|how|when|where|why|who)\b",
                r"\b(solar panel|photovoltaic|electricity bill)\b",
                r"\b(installation|cost|price|energy)\b"
            ],
            "es": [
                r"\b(qu√©|c√≥mo|cu√°ndo|d√≥nde|por qu√©|qui√©n)\b",
                r"\b(panel solar|fotovoltaico|factura el√©ctrica)\b",
                r"\b(instalaci√≥n|costo|precio|energ√≠a)\b"
            ],
            "de": [
                r"\b(was|wie|wann|wo|warum|wer)\b",
                r"\b(solarmodul|photovoltaik|stromrechnung)\b",
                r"\b(installation|kosten|preis|energie)\b"
            ],
            "it": [
                r"\b(cosa|come|quando|dove|perch√©|chi)\b",
                r"\b(pannello solare|fotovoltaico|bolletta elettrica)\b",
                r"\b(installazione|costo|prezzo|energia)\b"
            ]
        }
        
        for lang, pattern_list in patterns.items():
            matches = sum(len(re.findall(pattern, text)) for pattern in pattern_list)
            if matches > 0:
                confidence = min(matches * 0.3, 0.8)
                return lang, confidence
        
        # D√©faut fran√ßais
        return "fr", 0.5
    
    async def translate_text(self, text: str, source_lang: str, target_lang: str = "fr") -> Dict[str, Any]:
        """
        Traduit un texte d'une langue vers une autre
        
        Args:
            text: Texte √† traduire
            source_lang: Langue source
            target_lang: Langue cible (d√©faut: fran√ßais)
            
        Returns:
            Dictionnaire avec traduction et m√©tadonn√©es
        """
        
        if source_lang == target_lang:
            return {
                "translated_text": text,
                "source_language": source_lang,
                "target_language": target_lang,
                "method": "no_translation_needed"
            }
        
        try:
            if self.gemini_model:
                # Traduction avec Gemini
                prompt = f"""
                Traduis ce texte de {self.supported_languages[source_lang]['name']} vers {self.supported_languages[target_lang]['name']}.
                Conserve le contexte technique li√© √† l'√©nergie solaire.
                
                Texte √† traduire: "{text}"
                
                R√©ponse: traduction uniquement, sans explication.
                """
                
                response = self.gemini_model.generate_content(prompt)
                translated_text = response.text.strip()
                
                self.stats["translations"] += 1
                
                return {
                    "translated_text": translated_text,
                    "source_language": source_lang,
                    "target_language": target_lang,
                    "method": "gemini_translation",
                    "confidence": 0.85
                }
            
            else:
                # Traduction de base (mots-cl√©s uniquement)
                return self._basic_translation(text, source_lang, target_lang)
                
        except Exception as e:
            logger.error(f"Erreur traduction: {e}")
            return self._basic_translation(text, source_lang, target_lang)
    
    def _basic_translation(self, text: str, source_lang: str, target_lang: str) -> Dict[str, Any]:
        """
        Traduction basique des termes solaires courants
        
        Args:
            text: Texte √† traduire
            source_lang: Langue source
            target_lang: Langue cible
            
        Returns:
            Traduction basique
        """
        
        # Dictionnaire de traduction des termes solaires
        solar_translations = {
            ("en", "fr"): {
                "solar panel": "panneau solaire",
                "photovoltaic": "photovolta√Øque", 
                "inverter": "onduleur",
                "installation": "installation",
                "electricity": "√©lectricit√©",
                "energy": "√©nergie",
                "cost": "co√ªt",
                "price": "prix"
            },
            ("es", "fr"): {
                "panel solar": "panneau solaire",
                "fotovoltaico": "photovolta√Øque",
                "inversor": "onduleur",
                "instalaci√≥n": "installation",
                "electricidad": "√©lectricit√©",
                "energ√≠a": "√©nergie",
                "costo": "co√ªt",
                "precio": "prix"
            },
            ("de", "fr"): {
                "solarmodul": "panneau solaire",
                "photovoltaik": "photovolta√Øque",
                "wechselrichter": "onduleur",
                "installation": "installation",
                "strom": "√©lectricit√©",
                "energie": "√©nergie",
                "kosten": "co√ªt",
                "preis": "prix"
            },
            ("it", "fr"): {
                "pannello solare": "panneau solaire",
                "fotovoltaico": "photovolta√Øque",
                "inverter": "onduleur",
                "installazione": "installation",
                "elettricit√†": "√©lectricit√©",
                "energia": "√©nergie",
                "costo": "co√ªt",
                "prezzo": "prix"
            }
        }
        
        translation_dict = solar_translations.get((source_lang, target_lang), {})
        
        translated_text = text
        for source_term, target_term in translation_dict.items():
            translated_text = re.sub(
                r'\b' + re.escape(source_term) + r'\b', 
                target_term, 
                translated_text, 
                flags=re.IGNORECASE
            )
        
        return {
            "translated_text": translated_text,
            "source_language": source_lang,
            "target_language": target_lang,
            "method": "basic_dictionary",
            "confidence": 0.6
        }
    
    def get_solar_response(self, language: str, topic: str = "general_info") -> str:
        """
        Retourne une r√©ponse pr√©-d√©finie en √©nergie solaire dans la langue demand√©e
        
        Args:
            language: Code de langue
            topic: Sujet de la r√©ponse
            
        Returns:
            R√©ponse dans la langue demand√©e
        """
        
        if language not in self.solar_responses:
            language = "fr"  # D√©faut fran√ßais
        
        if topic not in self.solar_responses[language]:
            topic = "general_info"  # D√©faut informations g√©n√©rales
        
        return self.solar_responses[language][topic]
    
    def adapt_response_to_language(self, response: str, target_language: str) -> str:
        """
        Adapte une r√©ponse fran√ßaise vers une autre langue
        
        Args:
            response: R√©ponse en fran√ßais
            target_language: Langue cible
            
        Returns:
            R√©ponse adapt√©e
        """
        
        if target_language == "fr":
            return response
        
        # Si autre langue, retourner r√©ponse pr√©-d√©finie ou traduction basique
        if target_language in self.solar_responses:
            return self.solar_responses[target_language]["general_info"]
        
        return f"[Response in {target_language}] {response}"
    
    async def process_multilingual_request(self, message: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Traite une requ√™te multilingue compl√®te
        
        Args:
            message: Message utilisateur
            context: Contexte optionnel
            
        Returns:
            R√©ponse avec d√©tection et traitement multilingue
        """
        
        try:
            # 1. D√©tection de langue
            detection_result = self.detect_language(message)
            detected_lang = detection_result["language"]
            
            # 2. Traduction vers fran√ßais si n√©cessaire
            if detected_lang != "fr":
                translation_result = await self.translate_text(message, detected_lang, "fr")
                translated_message = translation_result["translated_text"]
            else:
                translated_message = message
                translation_result = None
            
            # 3. Analyse du contenu pour d√©terminer la r√©ponse appropri√©e
            topic = self._analyze_solar_topic(translated_message)
            
            # 4. G√©n√©ration de r√©ponse en fran√ßais
            if detected_lang == "fr":
                response = self.get_solar_response("fr", topic)
            else:
                # R√©ponse dans la langue d√©tect√©e
                response = self.get_solar_response(detected_lang, topic)
            
            # 5. R√©sultat complet
            result = {
                "response": response,
                "agent_used": "multilingual_detector",
                "confidence": detection_result["confidence"],
                "detected_language": detected_lang,
                "language_confidence": detection_result["confidence"],
                "original_message": message,
                "translated_message": translated_message if translation_result else None,
                "topic_detected": topic,
                "sources": [f"Solar Nasih Knowledge Base ({self.supported_languages[detected_lang]['native_name']})"]
            }
            
            return result
            
        except Exception as e:
            logger.error(f"Erreur traitement multilingue: {e}")
            return {
                "response": self.get_solar_response("fr", "general_info"),
                "agent_used": "multilingual_detector",
                "confidence": 0.5,
                "detected_language": "fr",
                "error": str(e),
                "sources": ["Solar Nasih Knowledge Base"]
            }
    
    def _analyze_solar_topic(self, message: str) -> str:
        """
        Analyse le sujet principal d'un message li√© √† l'√©nergie solaire
        
        Args:
            message: Message √† analyser
            
        Returns:
            Sujet d√©tect√©
        """
        
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["prix", "co√ªt", "tarif", "budget", "financement"]):
            return "pricing"
        elif any(word in message_lower for word in ["simulation", "calcul", "production", "√©conomie"]):
            return "simulation"
        elif any(word in message_lower for word in ["bonjour", "hello", "hola", "ciao", "guten tag"]):
            return "welcome"
        else:
            return "general_info"
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        Retourne les statistiques d'utilisation de l'agent
        
        Returns:
            Statistiques d√©taill√©es
        """
        
        return {
            "agent_type": self.agent_type,
            "supported_languages": list(self.supported_languages.keys()),
            "statistics": self.stats,
            "capabilities": [
                "Language detection",
                "Text translation", 
                "Multilingual solar responses",
                "Cultural adaptation"
            ]
        }
    
    def can_handle(self, user_input: str, context: Dict[str, Any] = None) -> float:
        """
        √âvalue si l'agent peut traiter la requ√™te
        
        Args:
            user_input: Entr√©e utilisateur
            context: Contexte optionnel
            
        Returns:
            Score de confiance (0-1)
        """
        
        detection_result = self.detect_language(user_input)
        detected_lang = detection_result["language"]
        confidence = detection_result["confidence"]
        
        # Score √©lev√© si langue non fran√ßaise d√©tect√©e avec confiance
        if detected_lang != "fr" and confidence > 0.6:
            return 0.9
        
        # Score moyen si indices multilingues
        multilingual_indicators = ["translate", "english", "espa√±ol", "deutsch", "italiano"]
        if any(indicator in user_input.lower() for indicator in multilingual_indicators):
            return 0.7
        
        # Score faible pour fran√ßais standard
        return 0.3