from typing import Dict, Any, List
from langchain.tools import BaseTool, tool, Tool
from agents.base_agent import BaseAgent
from models.schemas import AgentType, Language
from services.gemini_service import GeminiService
import logging

logger = logging.getLogger(__name__)

class CommercialAssistantAgent(BaseAgent):
    """
    Agent Assistant Commercial - Expertise financi√®re et commerciale
    """
    
    def __init__(self):
        super().__init__(
            agent_type=AgentType.COMMERCIAL_ASSISTANT,
            description="Fournit des conseils commerciaux sur l'√©nergie solaire, les prix, les offres et le financement"
        )
        self.gemini_service = GeminiService()
        
        self.financing_options = {
            "credit": {
                "eco_ptz": {"taux": "0%", "duree": "15 ans", "montant_max": "50000‚Ç¨"},
                "credit_travaux": {"taux": "2-8%", "duree": "10 ans", "montant_max": "75000‚Ç¨"},
                "credit_conso": {"taux": "3-12%", "duree": "7 ans", "montant_max": "25000‚Ç¨"}
            },
            "aides": {
                "prime_autoconso": {"2024": "300‚Ç¨/kWc < 3kWc, 230‚Ç¨/kWc 3-9kWc"},
                "tva_reduite": {"taux": "10%", "condition": "‚â§ 3kWc"},
                "aides_locales": {"variable": "Selon r√©gion/d√©partement"}
            },
            "modeles": ["achat_comptant", "location", "tiers_financement", "ppa"]
        }
        
        self.pricing_database = {
            "materiel": {
                "panneaux": {"monocristallin_400W": 200, "polycristallin_300W": 150},
                "onduleur": {"string_6kW": 1200, "micro_onduleur": 150},
                "structure": {"per_panel": 50},
                "cablage": {"per_kWc": 100}
            },
            "installation": {
                "main_oeuvre": {"per_kWc": 400},
                "demarches": {"forfait": 500},
                "raccordement": {"enedis": 500}
            },
            "marges": {
                "installateur": 0.25,
                "commercial": 0.15
            }
        }
    
    def _init_tools(self) -> List[Tool]:
        return [
            Tool(
                name="calculate_roi",
                description="Calcule le retour sur investissement",
                func=self._calculate_roi
            ),
            Tool(
                name="find_financing",
                description="Trouve les options de financement",
                func=self._find_financing
            ),
            Tool(
                name="generate_quote",
                description="G√©n√®re un devis estimatif",
                func=self._generate_quote
            ),
            Tool(
                name="compare_offers",
                description="Compare diff√©rentes offres",
                func=self._compare_offers
            ),
            Tool(
                name="calculate_savings",
                description="Calcule les √©conomies potentielles",
                func=self._calculate_savings
            ),
            Tool(
                name="analyze_financial_viability",
                description="Analyse la viabilit√© financi√®re",
                func=self._analyze_financial_viability
            )
        ]
    
    def _get_system_prompt(self) -> str:
        return """
        Tu es l'Agent Assistant Commercial du syst√®me Solar Nasih.
        
        Expertise commerciale:
        - Calculs de rentabilit√© et ROI
        - Options de financement adapt√©es
        - Aides et subventions 2024
        - G√©n√©ration de devis d√©taill√©s
        - Conseil en investissement
        - Analyse comparative d'offres
        
        Approche √©thique:
        - Transparence totale sur les co√ªts
        - Analyse financi√®re objective
        - Accompagnement personnalis√©
        - Information compl√®te sur les aides
        - Pr√©sentation des avantages ET contraintes
        
        Toujours fournir des chiffres r√©alistes et sourc√©s.
        """
    
    def _calculate_roi(self, investment_data: str) -> str:
        """Calcule le retour sur investissement d√©taill√©"""
        # Parsing simplifi√© des donn√©es d'investissement
        try:
            # Valeurs par d√©faut pour la d√©monstration
            investment = 12000  # ‚Ç¨
            annual_savings = 1200  # ‚Ç¨/an
            energy_inflation = 0.03  # 3% par an
            system_degradation = 0.005  # 0.5% par an
            
            roi_analysis = f"""
üí∞ ANALYSE ROI D√âTAILL√âE

üìä Investissement initial: {investment:,}‚Ç¨
üí° √âconomies ann√©e 1: {annual_savings:,}‚Ç¨/an
üìà Inflation √©lectricit√©: {energy_inflation*100:.1f}%/an
üìâ D√©gradation syst√®me: {system_degradation*100:.1f}%/an

üìÖ PROJECTIONS SUR 20 ANS:
"""
            
            cumulative_savings = 0
            for year in range(1, 21):
                yearly_savings = annual_savings * (1 + energy_inflation)**year * (1 - system_degradation)**year
                cumulative_savings += yearly_savings
                
                if year in [1, 5, 10, 15, 20]:
                    roi_percent = ((cumulative_savings - investment) / investment) * 100
                    roi_analysis += f"Ann√©e {year:2d}: {cumulative_savings:7,.0f}‚Ç¨ cumul√©s (ROI: {roi_percent:+5.1f}%)\n"
            
            payback_years = investment / annual_savings
            total_roi = ((cumulative_savings - investment) / investment) * 100
            
            roi_analysis += f"""
‚è±Ô∏è Temps de retour: {payback_years:.1f} ans
üéØ ROI total 20 ans: {total_roi:.1f}%
üìä TRI estim√©: {(cumulative_savings/investment)**(1/20)-1:.1%}/an

‚úÖ Rentabilit√©: {'EXCELLENTE' if total_roi > 200 else 'BONNE' if total_roi > 100 else 'CORRECTE'}
            """
            
            return roi_analysis
            
        except Exception as e:
            return f"Erreur calcul ROI: {str(e)}"
    
    def _find_financing(self, profile: str) -> str:
        """Trouve les options de financement adapt√©es au profil"""
        financing_options = f"""
üí≥ OPTIONS DE FINANCEMENT DISPONIBLES

üè¶ CR√âDITS BANCAIRES:
‚Ä¢ √âco-PTZ: {self.financing_options['credit']['eco_ptz']['taux']} sur {self.financing_options['credit']['eco_ptz']['duree']}
  Maximum: {self.financing_options['credit']['eco_ptz']['montant_max']}
  
‚Ä¢ Cr√©dit travaux: {self.financing_options['credit']['credit_travaux']['taux']} sur {self.financing_options['credit']['credit_travaux']['duree']}
  Maximum: {self.financing_options['credit']['credit_travaux']['montant_max']}

üí∞ AIDES PUBLIQUES 2024:
‚Ä¢ Prime autoconsommation: {self.financing_options['aides']['prime_autoconso']['2024']}
‚Ä¢ TVA r√©duite: {self.financing_options['aides']['tva_reduite']['taux']} si {self.financing_options['aides']['tva_reduite']['condition']}
‚Ä¢ Aides locales: Variables selon r√©gion

üîÑ MOD√àLES ALTERNATIFS:
‚Ä¢ Location avec option d'achat
‚Ä¢ Tiers financement (PPA)
‚Ä¢ Achat group√© (r√©duction co√ªts)

üìû CONSEIL: Combiner √©co-PTZ + prime autoconsommation optimal
        """
        
        return financing_options
    
    def _generate_quote(self, project_specs: str) -> str:
        """G√©n√®re un devis estimatif d√©taill√©"""
        # Exemple de devis pour installation 6kWc
        quote = f"""
üìã DEVIS ESTIMATIF - INSTALLATION PHOTOVOLTA√èQUE

üè† PROJET: Installation 6 kWc (15 panneaux 400Wc)

üí∞ D√âTAIL DES CO√õTS:

üì¶ MAT√âRIEL:
‚Ä¢ Panneaux 15x400Wc monocristallins    3,000‚Ç¨
‚Ä¢ Onduleur string 6kW                  1,200‚Ç¨
‚Ä¢ Structure de fixation                  750‚Ç¨
‚Ä¢ C√¢blage et protections                 600‚Ç¨
‚Ä¢ Monitoring                             200‚Ç¨
                            Sous-total: 5,750‚Ç¨

üîß INSTALLATION:
‚Ä¢ Main d'≈ìuvre pose                    2,400‚Ç¨
‚Ä¢ D√©marches administratives              500‚Ç¨
‚Ä¢ Raccordement ENEDIS                    500‚Ç¨
‚Ä¢ Mise en service + formation            300‚Ç¨
                            Sous-total: 3,700‚Ç¨

üíØ TOTAL HT:                           9,450‚Ç¨
üßæ TVA 20%:                           1,890‚Ç¨
üí∏ TOTAL TTC:                         11,340‚Ç¨

üéÅ AIDES D√âDUITES:
‚Ä¢ Prime autoconsommation (6kWc)       -1,380‚Ç¨
‚Ä¢ TVA r√©duite non applicable (>3kWc)

üí≥ PRIX FINAL:                         9,960‚Ç¨

üìà PRODUCTION ESTIM√âE: 7,200 kWh/an
üí∞ √âCONOMIES ANNUELLES: 1,300‚Ç¨/an
‚è±Ô∏è RETOUR SUR INVESTISSEMENT: 7.7 ans
        """
        
        return quote
    
    def _compare_offers(self, offers_data: str) -> str:
        """Compare diff√©rentes offres commerciales"""
        comparison = """
üîç GRILLE DE COMPARAISON D'OFFRES

üìä CRIT√àRES D'√âVALUATION:

1. üí∞ PRIX (pond√©ration 30%)
   ‚Ä¢ Co√ªt total (/kWc install√©)
   ‚Ä¢ Transparence tarification
   ‚Ä¢ Aides int√©gr√©es

2. üîß MAT√âRIEL (pond√©ration 25%)
   ‚Ä¢ Qualit√© panneaux (Tier 1?)
   ‚Ä¢ Rendement onduleur
   ‚Ä¢ Garanties √©quipements

3. üë∑ INSTALLATION (pond√©ration 20%)
   ‚Ä¢ Qualification RGE
   ‚Ä¢ R√©f√©rences clients
   ‚Ä¢ Assurance d√©cennale

4. üìû SERVICE (pond√©ration 15%)
   ‚Ä¢ SAV et maintenance
   ‚Ä¢ Monitoring inclus
   ‚Ä¢ R√©activit√© support

5. üìã ADMINISTRATIF (pond√©ration 10%)
   ‚Ä¢ D√©marches incluses
   ‚Ä¢ D√©lais raccordement
   ‚Ä¢ Garanties contractuelles

‚ö†Ô∏è POINTS DE VIGILANCE:
‚Ä¢ M√©fiance offres trop attractives
‚Ä¢ V√©rifier certifications RGE
‚Ä¢ Lire conditions garanties
‚Ä¢ Demander r√©f√©rences locales

üí° CONSEIL: Ne pas choisir uniquement sur le prix !
        """
        
        return comparison
    
    def _calculate_savings(self, consumption_data: str) -> str:
        """Calcule les √©conomies potentielles d√©taill√©es"""
        savings = """
üí° CALCUL D'√âCONOMIES D√âTAILL√â

üìä HYPOTH√àSES (famille type):
‚Ä¢ Consommation: 4,000 kWh/an
‚Ä¢ Installation: 6 kWc
‚Ä¢ Production: 7,200 kWh/an
‚Ä¢ Taux autoconsommation: 70%
‚Ä¢ Prix √©lectricit√©: 0.18‚Ç¨/kWh
‚Ä¢ Tarif revente: 0.13‚Ç¨/kWh

üí∞ √âCONOMIES ANNUELLES:
‚Ä¢ Autoconsommation: 5,040 kWh √ó 0.18‚Ç¨ = 907‚Ç¨
‚Ä¢ Revente surplus: 2,160 kWh √ó 0.13‚Ç¨ = 281‚Ç¨
‚Ä¢ TOTAL √âCONOMIES/AN: 1,188‚Ç¨

üìà PROJECTION 20 ANS (inflation 3%/an):
‚Ä¢ √âconomies cumul√©es: 28,500‚Ç¨
‚Ä¢ Investissement: 10,000‚Ç¨
‚Ä¢ GAIN NET: 18,500‚Ç¨

üåç B√âN√âFICES ENVIRONNEMENTAUX:
‚Ä¢ CO2 √©vit√©: 2.4 tonnes/an
‚Ä¢ √âquivalent: 400 arbres sur 20 ans
        """
        
        return savings
    
    def _analyze_financial_viability(self, project_data: str) -> str:
        """Analyse la viabilit√© financi√®re compl√®te"""
        analysis = """
üìà ANALYSE DE VIABILIT√â FINANCI√àRE

‚úÖ INDICATEURS POSITIFS:
‚Ä¢ TRI > 8% (seuil viabilit√©)
‚Ä¢ Payback < 10 ans
‚Ä¢ VAN positive sur 20 ans
‚Ä¢ Couverture > 70% besoins

‚ö†Ô∏è RISQUES √Ä CONSID√âRER:
‚Ä¢ √âvolution tarifs √©lectricit√©
‚Ä¢ D√©gradation √©quipements
‚Ä¢ Changements r√©glementaires
‚Ä¢ Entretien/remplacement onduleur

üìä SENSIBILIT√â:
‚Ä¢ +1% inflation √©lectricit√© = +2 ans gain
‚Ä¢ -10% production = +1.5 an payback
‚Ä¢ +1000‚Ç¨ investissement = +10 mois payback

üéØ RECOMMANDATION:
Projet VIABLE avec excellent profil risque/rendement
        """
        
        return analysis
    
    async def process(self, state) -> Dict[str, Any]:
        """M√©thode requise par BaseAgent - traite une requ√™te commerciale"""
        try:
            # Utiliser la langue d√©tect√©e par le workflow ou d√©tecter si pas disponible
            detected_language = getattr(state, 'detected_language', None)
            if not detected_language:
                detected_language = "fr"  # D√©faut fran√ßais
            
            # Analyse du type de demande commerciale
            message_lower = state.current_message.lower()
            
            if any(word in message_lower for word in ["roi", "retour", "investissement", "rentabilit√©"]):
                result = self._calculate_roi(state.current_message)
            elif any(word in message_lower for word in ["financement", "pr√™t", "cr√©dit", "aides"]):
                result = self._find_financing(state.current_message)
            elif any(word in message_lower for word in ["devis", "prix", "co√ªt", "tarif"]):
                result = self._generate_quote(state.current_message)
            elif any(word in message_lower for word in ["comparer", "comparaison", "offres"]):
                result = self._compare_offers(state.current_message)
            elif any(word in message_lower for word in ["√©conomies", "sauvegarder", "r√©duire"]):
                result = self._calculate_savings(state.current_message)
            elif any(word in message_lower for word in ["viabilit√©", "faisabilit√©", "rentable"]):
                result = self._analyze_financial_viability(state.current_message)
            else:
                # Analyse financi√®re g√©n√©rale
                result = self._calculate_roi(state.current_message)
            
            # G√©n√©ration de la r√©ponse dans la langue d√©tect√©e
            response = self._generate_commercial_response(result, detected_language)
            
            return {
                "response": response,
                "agent_used": "commercial_assistant",
                "confidence": 0.85,
                "detected_language": detected_language,
                "sources": ["Solar Nasih Commercial Database"]
            }
            
        except Exception as e:
            logger.error(f"Erreur dans l'assistant commercial: {e}")
            return {
                "response": f"Erreur lors de l'analyse commerciale: {str(e)}",
                "agent_used": "commercial_assistant",
                "confidence": 0.3,
                "error": str(e),
                "sources": ["Solar Nasih Commercial Database"]
            }
    
    def _generate_commercial_response(self, result: str, language: str) -> str:
        """G√©n√®re une r√©ponse commerciale dans la langue appropri√©e"""
        # Pour l'instant, retourner le r√©sultat tel quel
        # En production, on pourrait ajouter des traductions
        return result
    
    def can_handle(self, user_input: str, context: Dict[str, Any] = None) -> float:
        commercial_keywords = [
            "prix", "co√ªt", "devis", "financement", "cr√©dit", "aide",
            "subvention", "rentabilit√©", "√©conomie", "retour", "investissement",
            "roi", "payback", "taux", "budget", "tarif", "offre"
        ]
        matches = sum(1 for kw in commercial_keywords if kw in user_input.lower())
        return min(matches * 0.15, 1.0)