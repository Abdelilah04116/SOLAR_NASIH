# Qdrant Vector Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant
  namespace: rag-multimodal
  labels:
    app: qdrant
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.7.0
        ports:
        - containerPort: 6333
        - containerPort: 6334
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        - name: QDRANT__LOG_LEVEL
          value: "INFO"
        volumeMounts:
        - name: qdrant-storage
          mountPath: /qdrant/storage
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6333
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: qdrant-storage
        persistentVolumeClaim:
          claimName: qdrant-data-pvc
---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rag-multimodal
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "1gb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: rag-multimodal
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "rag_multimodal"
        - name: POSTGRES_USER
          value: "raguser"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rag-multimodal-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - raguser
            - -d
            - rag_multimodal
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - raguser
            - -d
            - rag_multimodal
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-data-pvc
---
# RAG API Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-multimodal-api
  namespace: rag-multimodal
  labels:
    app: rag-multimodal-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rag-multimodal-api
  template:
    metadata:
      labels:
        app: rag-multimodal-api
    spec:
      initContainers:
      - name: wait-for-qdrant
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z qdrant-service 6333; do echo waiting for qdrant; sleep 2; done;']
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done;']
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
      - name: api
        image: rag-multimodal:latest
        ports:
        - containerPort: 8000
        env:
        - name: QDRANT_URL
          valueFrom:
            configMapKeyRef:
              name: rag-multimodal-config
              key: QDRANT_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: rag-multimodal-config
              key: REDIS_URL
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: rag-multimodal-config
              key: DATABASE_URL
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-multimodal-secrets
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-multimodal-secrets
              key: ANTHROPIC_API_KEY
        - name: HUGGINGFACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-multimodal-secrets
              key: HUGGINGFACE_API_KEY
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rag-multimodal-config
              key: LOG_LEVEL
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: models-storage
          mountPath: /app/models
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: rag-data-pvc
      - name: models-storage
        persistentVolumeClaim:
          claimName: rag-data-pvc
---
# Frontend Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-multimodal-frontend
  namespace: rag-multimodal
  labels:
    app: rag-multimodal-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: rag-multimodal-frontend
  template:
    metadata:
      labels:
        app: rag-multimodal-frontend
    spec:
      initContainers:
      - name: wait-for-api
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z rag-multimodal-api-service 8000; do echo waiting for API; sleep 2; done;']
      containers:
      - name: frontend
        image: rag-multimodal-frontend:latest
        ports:
        - containerPort: 8501
        env:
        - name: API_URL
          value: "http://rag-multimodal-api-service:8000"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 10