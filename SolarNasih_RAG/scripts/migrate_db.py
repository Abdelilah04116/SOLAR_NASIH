#!/usr/bin/env python3
"""
Script de migration de base de donn√©es pour le syst√®me RAG multimodal.
G√®re les migrations de sch√©ma, les mises √† jour de donn√©es et la compatibilit√©.
"""

import argparse
import logging
import json
import sqlite3
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import hashlib

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseMigrator:
    """Classe pour g√©rer les migrations de base de donn√©es."""
    
    def __init__(self, db_path: str = "data/rag_system.db"):
        self.db_path = db_path
        self.migrations_table = "schema_migrations"
        self.migrations_dir = Path("migrations")
        
    def ensure_migrations_table(self):
        """Cr√©e la table de suivi des migrations si elle n'existe pas."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    version TEXT NOT NULL UNIQUE,
                    name TEXT NOT NULL,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    checksum TEXT NOT NULL
                )
            """)
            conn.commit()
    
    def get_applied_migrations(self) -> List[str]:
        """R√©cup√®re la liste des migrations d√©j√† appliqu√©es."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT version FROM schema_migrations ORDER BY applied_at")
            return [row[0] for row in cursor.fetchall()]
    
    def apply_migration(self, migration_file: Path) -> bool:
        """Applique une migration sp√©cifique."""
        try:
            with open(migration_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Calcul du checksum
            checksum = hashlib.md5(content.encode()).hexdigest()
            
            # Extraction des m√©tadonn√©es
            version = migration_file.stem
            name = migration_file.stem.replace('_', ' ').title()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Ex√©cution de la migration
                cursor.executescript(content)
                
                # Enregistrement de la migration
                cursor.execute("""
                    INSERT INTO schema_migrations (version, name, checksum)
                    VALUES (?, ?, ?)
                """, (version, name, checksum))
                
                conn.commit()
            
            logger.info(f"‚úÖ Migration appliqu√©e: {name} ({version})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'application de {migration_file}: {e}")
            return False
    
    def create_migration(self, name: str, description: str = "") -> str:
        """Cr√©e un nouveau fichier de migration."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{name.lower().replace(' ', '_')}.sql"
        filepath = self.migrations_dir / filename
        
        # Cr√©ation du dossier migrations si n√©cessaire
        self.migrations_dir.mkdir(exist_ok=True)
        
        # Contenu du template de migration
        template = f"""-- Migration: {name}
-- Description: {description}
-- Date: {datetime.now().isoformat()}

-- TODO: Ajouter vos commandes SQL ici
-- Exemples:
-- CREATE TABLE IF NOT EXISTS documents (
--     id INTEGER PRIMARY KEY AUTOINCREMENT,
--     filename TEXT NOT NULL,
--     content TEXT,
--     metadata TEXT,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );

-- ALTER TABLE existing_table ADD COLUMN new_column TEXT;

-- INSERT INTO table_name (column1, column2) VALUES (value1, value2);

"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(template)
        
        logger.info(f"‚úÖ Nouvelle migration cr√©√©e: {filepath}")
        return str(filepath)
    
    def run_migrations(self, target_version: Optional[str] = None) -> bool:
        """Ex√©cute toutes les migrations en attente."""
        self.ensure_migrations_table()
        
        # R√©cup√©ration des migrations appliqu√©es
        applied_migrations = set(self.get_applied_migrations())
        
        # R√©cup√©ration de toutes les migrations disponibles
        migration_files = sorted(self.migrations_dir.glob("*.sql"))
        
        if not migration_files:
            logger.warning("‚ö†Ô∏è Aucun fichier de migration trouv√© dans le dossier 'migrations'")
            return True
        
        # Filtrage des migrations √† appliquer
        pending_migrations = []
        for migration_file in migration_files:
            version = migration_file.stem
            if version not in applied_migrations:
                pending_migrations.append(migration_file)
        
        if not pending_migrations:
            logger.info("‚úÖ Toutes les migrations sont d√©j√† appliqu√©es")
            return True
        
        logger.info(f"üöÄ Application de {len(pending_migrations)} migration(s)")
        
        # Application des migrations
        success_count = 0
        for migration_file in pending_migrations:
            if self.apply_migration(migration_file):
                success_count += 1
            else:
                logger.error(f"‚ùå √âchec de la migration: {migration_file}")
                return False
        
        logger.info(f"‚úÖ {success_count}/{len(pending_migrations)} migration(s) appliqu√©e(s) avec succ√®s")
        return True
    
    def rollback_migration(self, version: str) -> bool:
        """Annule une migration sp√©cifique (si possible)."""
        logger.warning(f"‚ö†Ô∏è Rollback de la migration {version}")
        # Note: L'impl√©mentation du rollback d√©pend de la complexit√© des migrations
        # Pour l'instant, on affiche juste un avertissement
        return True
    
    def show_status(self):
        """Affiche le statut des migrations."""
        self.ensure_migrations_table()
        
        applied_migrations = self.get_applied_migrations()
        migration_files = sorted(self.migrations_dir.glob("*.sql"))
        
        print("\n" + "="*50)
        print("üìä STATUT DES MIGRATIONS")
        print("="*50)
        print(f"Migrations appliqu√©es: {len(applied_migrations)}")
        print(f"Migrations disponibles: {len(migration_files)}")
        print(f"Migrations en attente: {len(migration_files) - len(applied_migrations)}")
        
        if applied_migrations:
            print("\nMigrations appliqu√©es:")
            for migration in applied_migrations:
                print(f"  ‚úÖ {migration}")
        
        pending_migrations = [f.stem for f in migration_files if f.stem not in applied_migrations]
        if pending_migrations:
            print("\nMigrations en attente:")
            for migration in pending_migrations:
                print(f"  ‚è≥ {migration}")
        
        print("="*50)

def main():
    """Fonction principale du script de migration."""
    parser = argparse.ArgumentParser(description="Migration de base de donn√©es pour le syst√®me RAG")
    parser.add_argument("--db-path", "-d", default="data/rag_system.db", help="Chemin vers la base de donn√©es")
    parser.add_argument("--action", "-a", choices=["migrate", "create", "status", "rollback"], 
                       default="migrate", help="Action √† effectuer")
    parser.add_argument("--name", "-n", help="Nom de la nouvelle migration (pour l'action 'create')")
    parser.add_argument("--description", "-desc", default="", help="Description de la migration")
    parser.add_argument("--version", "-v", help="Version de migration pour le rollback")
    
    args = parser.parse_args()
    
    # Initialisation du migrateur
    migrator = DatabaseMigrator(args.db_path)
    
    if args.action == "migrate":
        success = migrator.run_migrations()
        if success:
            logger.info("‚úÖ Migration termin√©e avec succ√®s")
        else:
            logger.error("‚ùå √âchec de la migration")
            exit(1)
    
    elif args.action == "create":
        if not args.name:
            logger.error("‚ùå Le nom de la migration est requis pour l'action 'create'")
            exit(1)
        filepath = migrator.create_migration(args.name, args.description)
        print(f"üìÅ Migration cr√©√©e: {filepath}")
    
    elif args.action == "status":
        migrator.show_status()
    
    elif args.action == "rollback":
        if not args.version:
            logger.error("‚ùå La version est requise pour l'action 'rollback'")
            exit(1)
        success = migrator.rollback_migration(args.version)
        if success:
            logger.info("‚úÖ Rollback termin√©")
        else:
            logger.error("‚ùå √âchec du rollback")

if __name__ == "__main__":
    main()
